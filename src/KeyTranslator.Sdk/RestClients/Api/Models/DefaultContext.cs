/* 
 * Xlent.Lever.KeyTranslator.Api.WebApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Nexus.Link.KeyTranslator.Sdk.RestClients.Api.Models
{
    /// <summary>
    /// DefaultContext
    /// </summary>
    [DataContract]
    public partial class DefaultContext :  IEquatable<DefaultContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultContext" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="ConceptId">ConceptId.</param>
        /// <param name="ContextId">ContextId.</param>
        public DefaultContext(Guid? Id = default, Guid? ClientId = default, Guid? ConceptId = default, Guid? ContextId = default)
        {
            this.Id = Id;
            this.ClientId = ClientId;
            this.ConceptId = ConceptId;
            this.ContextId = ContextId;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }
        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="ClientId", EmitDefaultValue=false)]
        public Guid? ClientId { get; set; }
        /// <summary>
        /// Gets or Sets ConceptId
        /// </summary>
        [DataMember(Name="ConceptId", EmitDefaultValue=false)]
        public Guid? ConceptId { get; set; }
        /// <summary>
        /// Gets or Sets ContextId
        /// </summary>
        [DataMember(Name="ContextId", EmitDefaultValue=false)]
        public Guid? ContextId { get; set; }
        /// <summary>
        /// Gets or Sets VersionTag
        /// </summary>
        [DataMember(Name="VersionTag", EmitDefaultValue=false)]
        public Guid? VersionTag { get; private set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DefaultContext {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ConceptId: ").Append(ConceptId).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  VersionTag: ").Append(VersionTag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DefaultContext);
        }

        /// <summary>
        /// Returns true if DefaultContext instances are equal
        /// </summary>
        /// <param name="other">Instance of DefaultContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DefaultContext other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.ConceptId == other.ConceptId ||
                    this.ConceptId != null &&
                    this.ConceptId.Equals(other.ConceptId)
                ) && 
                (
                    this.ContextId == other.ContextId ||
                    this.ContextId != null &&
                    this.ContextId.Equals(other.ContextId)
                ) && 
                (
                    this.VersionTag == other.VersionTag ||
                    this.VersionTag != null &&
                    this.VersionTag.Equals(other.VersionTag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.ConceptId != null)
                    hash = hash * 59 + this.ConceptId.GetHashCode();
                if (this.ContextId != null)
                    hash = hash * 59 + this.ContextId.GetHashCode();
                if (this.VersionTag != null)
                    hash = hash * 59 + this.VersionTag.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
